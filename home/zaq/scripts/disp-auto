#!/usr/bin/bash

# udev will wait for our script to finish before the monitor is available
# for use, so we will use the `at` command to run our command again as
# another user:
if [ "$1" != "forked" ]; then
    echo "$(dirname $0)/$(basename $0) forked" | at now
    exit
fi

# udev runs as root, so we need to tell it how to connect to the X server:
export DISPLAY=:0
export XAUTHORITY=/home/zaq/.Xauthority

# Find out the device path to our graphics card:
cardPath=/sys/$(udevadm info -q path -n /dev/dri/card1)

# Detect if the monitor is connected and, if so, the monitor's ID:
conHdmi=$(xrandr | grep '^DP-[12] connected')
shaHdmi1=$(sha1sum $cardPath/card1-DP-1/edid | cut -f1 -d " ")
shaHdmi2=$(sha1sum $cardPath/card1-DP-2/edid | cut -f1 -d " ")

# The useful part: check what the connection status is, and run some other commands
if [ -n "$conHdmi" ]; then
    if [ "$shaHdmi1" = "e6f792f461e9e9f3ca5917f52044806f8de36f57" ]; then
        xrandr --output eDP-1 --auto --output DP-1 --auto --primary --left-of eDP-1
    elif ["$shaHdmi2" = "e6f792f461e9e9f3ca5917f52044806f8de36f57" ]; then    # Office PC
        xrandr --output eDP-1 --auto --output DP-2 --auto --primary --left-of eDP-1
    #else                                            # Probably a projector
        # xrandr --output eDP-1 --auto --output DP-2 --auto --same-as eDP-1
    fi
else
    xrandr --output eDP-1 --auto --primary --output DP-2 --off --output DP-1 --off
fi
